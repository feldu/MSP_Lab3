<?xml version="1.0"?>
<project name="Web_Lab3" default="build">
    <property file="build.properties"/>
    <path id="classpath">
        <fileset dir="${src.lib.dir}" includes="*.jar"/>
        <fileset dir="${main.dir}" includes="*.java"/>
    </path>

    <path id="classpath.test">
        <pathelement location="${junit}"/>
        <pathelement location="${hamcrest}"/>
        <pathelement location="${classes.dir}"/>
    </path>

    <target name="clean">
        <delete dir="${build.dir}"/>
    </target>

    <target name="compile" depends="clean">
        <mkdir dir="${classes.dir}"/>
        <mkdir dir="${test.classes.dir}"/>
        <javac srcdir="${main.dir}" destdir="${classes.dir}" classpathref="classpath"
               includeantruntime="false"/>
        <copy todir="${classes.dir}">
            <fileset dir="${java-resources.dir}"/>
        </copy>
    </target>

    <target name="build" depends="compile">
        <copy todir="${war_exploded.dir}">
            <fileset dir="${web.dir}"/>
        </copy>
        <copy todir="${lib.dir}">
            <fileset dir="${src.lib.dir}"/>
        </copy>
        <war destfile="${build.dir}/${ant.project.name}.war">
            <fileset dir="${war_exploded.dir}"/>
        </war>

    </target>

    <target name="test" depends="compile">
        <mkdir dir="${test.classes.dir}"/>
        <javac destdir="${test.classes.dir}" srcdir="${test.dir}" includeantruntime="false"
               classpathref="classpath.test"/>
        <junit printsummary="on" haltonfailure="yes">
            <classpath>
                <path refid="classpath.test"/>
                <pathelement location="${test.classes.dir}"/>
            </classpath>
            <formatter type="plain" usefile="false"/>
            <batchtest>
                <fileset dir="${test.dir}" includes="**/*Test*.java"/>
            </batchtest>
        </junit>

    </target>

    <target name="xml">
        <xmlvalidate failonerror="no" warn="yes">
            <fileset dir="${project.dir}" includes="**/*.xml"/>
            <attribute name="http://xml.org/sax/features/validation" value="true"/>
            <attribute name="http://apache.org/xml/features/validation/schema" value="true"/>
            <attribute name="http://xml.org/sax/features/namespaces" value="true"/>
        </xmlvalidate>
    </target>

    <taskdef resource="net/sf/antcontrib/antlib.xml"/>

    <target name="history">
        <exec executable="git" outputproperty="commits.count">
            <arg value="rev-list"/>
            <arg value="--count"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="current.commit">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>

        <exec executable="git" outputproperty="current.work_diff">
            <arg value="diff"/>
            <arg value="HEAD"/>
        </exec>

        <if>
            <length string="${current.work_diff}" length="0" trim="true" when="greater"/>
            <then>
                <fail message="Working tree should not have changes"/>
            </then>
        </if>

        <trycatch>
            <try>
                <for param="i" begin="1" end="${commits.count}">
                    <sequential>
                        <trycatch>
                            <try>
                                <antcall target="compile"/>
                                <property name="breakProperty" value="true"/>
                            </try>
                            <catch>
                                <exec executable="git" outputproperty="previous.commit">
                                    <arg value="rev-parse"/>
                                    <arg value="HEAD"/>
                                </exec>
                                <echo>Error in compile target</echo>
                                <exec executable="git">
                                    <arg value="reset"/>
                                    <arg value="--hard"/>
                                    <arg value="HEAD~1"/>
                                </exec>
                            </catch>
                            <finally>
                                <fail if="breakProperty"/>
                            </finally>
                        </trycatch>
                    </sequential>
                </for>
            </try>
            <catch>
                <echo>Finally</echo>
            </catch>
            <finally>
                <if>
                    <isset property="previous.commit"/>
                    <then>
                        <exec executable="git">
                            <arg value="diff"/>
                            <arg value="${previous.commit}"/>
                            <redirector output="diff.txt" alwayslog="true"/>
                        </exec>
                    </then>
                </if>
                <echo>Original commit: ${current.commit}</echo>
            </finally>
        </trycatch>
    </target>
</project>